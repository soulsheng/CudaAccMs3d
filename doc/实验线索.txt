1、绪论
问题：骨骼动画帧速低。
诊断：计算时间长，渲染时间长。
路线：缩短时间，包括计算和渲染两个环节的时间。
方法：多核并行运算，先用CPU多核，再用GPU多核，择优采纳。
预测：CPU多核并行和GPU多核并行两者都能够缩短计算时间。GPU多核同时能够缩短渲染时间，预计GPU多核比CPU多核将更大幅度地缩短时间。

2、展开
    骨骼动画数据结构：三角面关联顶点的索引、顶点、顶点关联骨骼矩阵的索引、骨骼矩阵、骨骼动作关键帧。
    计算涉及的算法：骨骼动作关键帧修改骨骼矩阵，骨骼矩阵修改顶点的位置坐标。
    渲染涉及的算法：顶点数据传输到图像处理器GPU，GPU进行渲染。渲染方式分为VBO渲染和普通渲染这两种，对应两种不同的数据传输方式，即逐帧重复传输和一次性传输。
    计算与渲染的相关性：如果计算所用的处理器是CPU，渲染方式是普通渲染，顶点数据传输方式是逐帧重复传输；如果计算所用的处理器是GPU，渲染方式是VBO渲染，顶点数据传输方式是一次性传输。
    时间与问题规模的相关性：问题规模体现在数据量，当数据量成倍增长时，耗时将以什么速度增长。耗时增长速度，最终影响优化算法的适用范围和实际效果。

3、基础实验
3.1 CPU单线程，进行耗时分析，记录总耗时以及各个细分环节的耗时。
    细分环节包括3个，骨骼动作关键帧修改骨骼矩阵、骨骼矩阵修改顶点的位置坐标、顶点数据从内存传输到显存并且渲染，分别简称为，修改骨骼、修改顶点、渲染。
    【实验3.1】不同规模的数据，分别记录CPU单线程的总耗时以及各个细分环节的耗时。
    根据实验分析结果，找到耗时比例较大的环节，作为优化目标，准备执行多核并行运算。修改顶点这一环节耗时最多，将它作为优化目标，拟采用CPU多核和GPU多核两种方式。修改骨骼这一环节的运算量很小而且骨骼之间存在依赖关系，不适于并行运算。渲染环节能否优化以及如何优化，跟上一环节即修改顶点相关，修改顶点若采用CPU算法，渲染无法优化；若采用GPU算法，渲染采用VBO进行优化。

3.2 为适应多核并行，做一定的预备工作
    预备工作包括，使单核单线程算法的性能达到最优、降低算法结构的复杂性。
    单线程算法流程细分为以下几个环节，读取上一帧的骨骼矩阵、读取上一帧的顶点坐标、通过上一帧的骨骼矩阵的逆矩阵修改上一帧的顶点坐标获取顶点坐标初始值、读取当前帧的骨骼矩阵、通过当前帧的骨骼矩阵修改顶点坐标初始值获取新的顶点坐标、写入新的顶点坐标。涉及3个读数据操作、2个坐标与矩阵之间的运算操作、1个写数据操作。采用以空间换时间的方法，额外备份一份顶点坐标初始值，将节省1个读操作和1个运算操作。
    【实验3.2.1】不同规模的数据，分别记录减少运算量之后的总耗时以及各个细分环节的耗时。
    根据实验分析结果，时间缩短为原来的X%。
    算法结构方面，原始算法的所有面片连带顶点分按照网格进行分组，导致顶点被切分。重新将所有顶点合并在一起，将简化算法结构的复杂性。
    【实验3.2.2】不同规模的数据，分别记录顶点合并之后的总耗时以及各个细分环节的耗时。
    根据实验分析结果，这个优化对于单线程，时间没有缩短，但有利于并行运算，在并行运算时将对顶点合并前后的时间进行对比分析。

3.3 基于OpenMP的CPU多核并行
    开启OpenMP的方法是，编译选项新增"/openmp"，在需要并行的循环体之前添加指令"#pragma parallel for"。
   【实验3.3】不同规模的数据，CPU多核并行的总耗时以及各个细分环节的耗时。
    根据实验分析结果，时间缩短为原来的X%。

3.4 基于CUDA的GPU多核并行

   【实验3.4】不同规模的数据，GPU多核并行的总耗时以及各个细分环节的耗时。
    根据实验分析结果，时间缩短为原来的X%。

4、优化基于CUDA的GPU多核并行
4.1 

4.2 

5、结论
结果：GPU多核帧速是CPU多核帧速的N倍，采纳GPU多核并行这一方法用于缩短时间，进而提升帧速。计算和渲染总时间缩短为原来的T%，骨骼动画帧速提高幅度为F%。


